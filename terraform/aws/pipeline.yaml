pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: destroyResources
  displayName: 'Destroy Resources'
  type: boolean
  default: true
- name: runCheckovScan
  displayName: 'Run Checkov Scan'
  type: boolean
  default: true

variables:
- group: 'AWS_TERRAFORM_PIPELINE'
- name: workingDirectory
  value: 'terraform/aws'
- name: bucketName
  value: 's3-eoghank-mgmt-terraform-aws-test-pipeline'

stages:
- stage: Plan
  jobs:
  - job: TerraformDeploy
    displayName: 'Deploy Terraform Resources'
    steps:

    - task: Bash@3
      displayName: 'Terraform Init'
      inputs:
        targetType: 'inline'        
        script: |
          terraform init -input=false        
        workingDirectory: $(workingDirectory)
        env:
          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
          AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

    - task: Bash@3
      displayName: 'Terraform Validate'
      inputs:
        targetType: 'inline'        
        script: |
          terraform validate      
      workingDirectory: $(workingDirectory)

    - task: Bash@3
      displayName: 'Run Checkov Scan'
      inputs:
        targetType: 'inline'        
        script:
          pip install checkov
          checkov -d .      
      condition: ${{ eq(parameters.runCheckovScan, true) }}
      workingDirectory: $(workingDirectory)

    - task: Bash@3
      displayName: 'Run Terraform Tests'
      inputs:
        targetType: 'inline'        
        script:
          terraform test -var "bucket_name=$(bucketName)"      
      workingDirectory: $(workingDirectory)
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

    - task: Bash@3
      displayName: 'Terraform Plan'
      inputs:
        targetType: 'inline'        
        script:
          terraform plan -out=tfplan -var "bucket_name=$(bucketName)"      
      workingDirectory: $(workingDirectory)
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(workingDirectory)/tfplan'
        artifactName: 'tfplan'
        publishLocation: 'pipeline'

- stage: Apply
  dependsOn: Plan
  jobs:
  - job: TerraformApply
    displayName: 'Terraform Apply'
    steps:   

    - task: Bash@3
      displayName: 'Terraform Init'
      inputs:
        targetType: 'inline'        
        script:
          terraform init -input=false      
      workingDirectory: $(workingDirectory)
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'tfplan'
        targetPath: '$(workingDirectory)'

    - task: Bash@3
      displayName: 'Terraform Apply'
      inputs:
        targetType: 'inline'        
        script:
          terraform apply -auto-approve tfplan      
      workingDirectory: $(workingDirectory)
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

- stage: Destroy
  dependsOn: Apply
  condition: ${{ eq(parameters.destroyResources, true) }}
  jobs:
  - job: TerraformDestroy
    displayName: 'Terraform Destroy'
    steps:

    - task: Bash@3
      displayName: 'Terraform Init'
      inputs:
        targetType: 'inline'        
        script:
          terraform init -input=false      
      workingDirectory: $(workingDirectory)
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)

    - task: Bash@3
      displayName: 'Terraform Destroy'
      inputs:
        targetType: 'inline'        
        script:
          terraform destroy -auto-approve -var "bucket_name=$(bucketName)"      
      workingDirectory: $(workingDirectory)
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)